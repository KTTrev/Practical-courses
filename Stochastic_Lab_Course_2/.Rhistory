install.packages("ggplot2")
install.packages("dplyr")
set.seed(250)
library("tidyverse")
##Question (a)
#Switch the default random number generator in R to Wichmann-Hill
RNGkind(kind = "Wichmann-Hill", normal.kind = NULL)
#Inversion method to simulate a binomial random variable
N = 1000
n = 10
p = 0.4
u <- runif(N)
bins <- .bincode(u, breaks = c(0, pbinom(0:10, 10, 0.4)), right = F, include.lowest = T)
bin_inv <- numeric()
for(i in 1:N){
bin_inv[i] <- bins[i]-1
}
#Simulation of a binomial random variable by simulating corresponding Bernoulli random variables by inversion method
bin_bern <- numeric()
for (i in 1:N){
v <- runif(n)
bin_bern[i] <- sum(v < p)
}
#Simulation of a binomial random variable with rbinom
bin_rbin <- rbinom(N, n, p)
#Plot the empirical pdf of all three samples on one panel
bin_inv <- data.frame(bin_inv)
str(bin_inv)
head(bin_inv)
rep(bin_inv, 1000)
bin_inv$method <- rep("bin_inv", 1000)
head(bin_inv)
colnames(bin_inv) <- c("rand_num", "method")
head(bin_inv)
bin_bern <- data.frame(bin_bern)
bin_bern$method <- rep("bin_bern", 1000)
colnames(bin_bern) <- c("rand_num", "method")
head(bin_bern)
bin_rbin <- data.frame(bin_rbin)
bin_rbin$method <- rep("bin_rbin", 1000)
colnames(bin_rbin) <- c("rand_num", "method")
head(bin_bern)
head(bin_rbin)
df <- rbind(bin_inv, bin_bern, bin_rbin)
head(df)
ggplot(df) +
geom_density(aes(x = rand_num, fill=method))
ggplot(df) +
geom_density(aes(x = rand_num, alpha=method))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.25)
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7)
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
scale_colour_manual(labels = c("urban", "rural", "hi"))# values = c("pink2", "green3", "blue"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
set.seed(250)
library("tidyverse")
##Question (a)
#Switch the default random number generator in R to Wichmann-Hill
RNGkind(kind = "Wichmann-Hill", normal.kind = NULL)
#Inversion method to simulate a binomial random variable
N = 1000
n = 10
p = 0.4
u <- runif(N)
bins <- .bincode(u, breaks = c(0, pbinom(0:10, 10, 0.4)), right = F, include.lowest = T)
bin_inv <- numeric()
for(i in 1:N){
bin_inv[i] <- bins[i]-1
}
#Simulation of a binomial random variable by simulating corresponding Bernoulli random variables by inversion method
bin_bern <- numeric()
for (i in 1:N){
v <- runif(n)
bin_bern[i] <- sum(v < p)
}
#Simulation of a binomial random variable with rbinom
bin_rbin <- rbinom(N, n, p)
#Plot the empirical pdf of all three samples on one panel
bin_inv <- data.frame(bin_inv)
bin_inv$method <- rep("bin_inv", 1000)
colnames(bin_inv) <- c("rand_num", "method")
bin_bern <- data.frame(bin_bern)
bin_bern$method <- rep("bin_bern", 1000)
colnames(bin_bern) <- c("rand_num", "method")
bin_rbin <- data.frame(bin_rbin)
bin_rbin$method <- rep("bin_rbin", 1000)
colnames(bin_rbin) <- c("rand_num", "method")
df <- rbind(bin_inv, bin_bern, bin_rbin)
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method")) +
theme_bw()
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method")) +
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Cylinders") +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation method") +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method") +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
#Plot the empirical pdf of all three samples on one panel
bin_inv <- data.frame(bin_inv)
bin_inv$method <- rep("inverse CDF", 1000)
colnames(bin_inv) <- c("rand_num", "method")
bin_bern <- data.frame(bin_bern)
bin_bern$method <- rep("From Bernoulli", 1000)
colnames(bin_bern) <- c("rbinom", "method")
bin_rbin <- data.frame(bin_rbin)
bin_rbin$method <- rep("bin_rbin", 1000)
colnames(bin_rbin) <- c("rand_num", "method")
df <- rbind(bin_inv, bin_bern, bin_rbin)
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method") +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
head(df)
#Plot the empirical pdf of all three samples on one panel
bin_inv <- data.frame(bin_inv)
bin_inv$method <- rep("inverse CDF", 1000)
colnames(bin_inv) <- c("rand_num", "method")
head(bin_inv )
head(bin_bern)
head(bin_rbin)
set.seed(250)
library("tidyverse")
##Question (a)
#Switch the default random number generator in R to Wichmann-Hill
RNGkind(kind = "Wichmann-Hill", normal.kind = NULL)
#Inversion method to simulate a binomial random variable
N = 1000
n = 10
p = 0.4
u <- runif(N)
bins <- .bincode(u, breaks = c(0, pbinom(0:10, 10, 0.4)), right = F, include.lowest = T)
bin_inv <- numeric()
for(i in 1:N){
bin_inv[i] <- bins[i]-1
}
#Simulation of a binomial random variable by simulating corresponding Bernoulli random variables by inversion method
bin_bern <- numeric()
for (i in 1:N){
v <- runif(n)
bin_bern[i] <- sum(v < p)
}
#Simulation of a binomial random variable with rbinom
bin_rbin <- rbinom(N, n, p)
#Plot the empirical pdf of all three samples on one panel
bin_inv <- data.frame(bin_inv)
bin_inv$method <- rep("inverse CDF", 1000)
colnames(bin_inv) <- c("rand_num", "method")
bin_bern <- data.frame(bin_bern)
bin_bern$method <- rep("From Bernoulli", 1000)
colnames(bin_bern) <- c("rand_num", "method")
bin_rbin <- data.frame(bin_rbin)
bin_rbin$method <- rep("rbinom", 1000)
colnames(bin_rbin) <- c("rand_num", "method")
df <- rbind(bin_inv, bin_bern, bin_rbin)
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method") +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method", title = "gggggggggggggggg") +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method", title = "empirical probability density functions of all
three samples") +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method", title = "empirical probability density functions of all three samples") +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method", title = "empirical probability density functions of all three samples", y = "random numbers") +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method", title = "empirical probability density functions of all three samples", ylab = "random numbers") +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method", title = "empirical probability density functions of all three samples", ylab = "random numbers") +
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method", title = "empirical probability density functions of all three samples", y = "random numbers")
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method", title = "empirical probability density functions of all three samples", y = "random numbers")
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method", title = "empirical probability density functions of all three samples", x = "random numbers")
ggplot(df) +
geom_density(aes(x = rand_num, color = method), alpha = 0.7) +
labs(color = "Simulation \n method", title = "empirical probability density functions of all three samples", x = "random numbers")
ggplot(df) +
geom_density(aes(x = rand_num, color = method), alpha = 1) +
labs(color = "Simulation \n method", title = "empirical probability density functions of all three samples", x = "random numbers")
ggplot(df) +
geom_density(aes(x = rand_num, color = method)) +
labs(color = "Simulation \n method", title = "empirical probability density functions of all three samples", x = "random numbers")
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method", title = "empirical probability density functions of all three samples", x = "random numbers")
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.5) +
labs(fill = "Simulation \n method", title = "empirical probability density functions of all three samples", x = "random numbers")
?RNGkind
#Switch the random number generator back to its default
RNGkind(kind = "default", normal.kind = NULL)
#Inversion method to simulate a binomial random variable
N = 1000
n = 10
p = 0.4
u <- runif(N)
bins <- .bincode(u, breaks = c(0, pbinom(0:10, 10, 0.4)), right = F, include.lowest = T)
bin_inv <- numeric()
for(i in 1:N){
bin_inv[i] <- bins[i]-1
}
#Simulation of a binomial random variable by simulating corresponding Bernoulli random variables by inversion method
bin_bern <- numeric()
for (i in 1:N){
v <- runif(n)
bin_bern[i] <- sum(v < p)
}
#Simulation of a binomial random variable with rbinom
bin_rbin <- rbinom(N, n, p)
#Plot the empirical pdf of all three samples on one panel
bin_inv <- data.frame(bin_inv)
bin_inv$method <- rep("inverse CDF", 1000)
colnames(bin_inv) <- c("rand_num", "method")
bin_bern <- data.frame(bin_bern)
bin_bern$method <- rep("From Bernoulli", 1000)
colnames(bin_bern) <- c("rand_num", "method")
bin_rbin <- data.frame(bin_rbin)
bin_rbin$method <- rep("rbinom", 1000)
colnames(bin_rbin) <- c("rand_num", "method")
df <- rbind(bin_inv, bin_bern, bin_rbin)
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.5) +
labs(fill = "Simulation \n method", title = "empirical probability density functions of all three samples", x = "random numbers")
install.packages("survival")
library("survival", lib.loc="/usr/lib/R/library")
detach("package:survival", unload=TRUE)
library("proxy", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
detach("package:proxy", unload=TRUE)
library("survival", lib.loc="/usr/lib/R/library")
detach("package:survival", unload=TRUE)
library("survival", lib.loc="/usr/lib/R/library")
detach("package:survival", unload=TRUE)
library("survival", lib.loc="/usr/lib/R/library")
detach("package:survival", unload=TRUE)
library("survival", lib.loc="/usr/lib/R/library")
detach("package:survival", unload=TRUE)
library("survival", lib.loc="/usr/lib/R/library")
detach("package:survival", unload=TRUE)
library("survival", lib.loc="/usr/lib/R/library")
library("survival", lib.loc="/usr/lib/R/library")
detach("package:survival", unload=TRUE)
library("survival", lib.loc="/usr/lib/R/library")
detach("package:survival", unload=TRUE)
remove.packages("survival", lib="/usr/lib/R/library")
remove.packages("survival", lib="/usr/lib/R/library")
.libPaths(proxy)
.libPaths("proxy")
.libPaths("ggplot2")
?.libPaths()
library("tidyverse")
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
library("survival", lib.loc="/usr/lib/R/library")
library("dplyr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
library("tidyverse", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
detach("package:tidyverse", unload=TRUE)
library("tidyverse", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
remove.packages("tidyverse", lib="~/R/x86_64-pc-linux-gnu-library/3.5")
remove.packages("survival", lib="/usr/lib/R/library")
remove.packages("survival", lib="/usr/lib/R/library")
remove.packages("survival", lib="/usr/lib/R/library")
remove.packages("survival", lib="/usr/lib/R/library")
install.packages("survival")
remove.packages("lattice", lib="/usr/lib/R/library")
remove.packages("lattice", lib="/usr/lib/R/library")
remove.packages("lattice", lib="/usr/lib/R/library")
install.packages("lattice")
library("lattice", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
remove.packages("lattice", lib="/usr/lib/R/library")
install.packages("survival")
library("survival", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
remove.packages("survival", lib="/usr/lib/R/library")
detach("package:survival", unload=TRUE)
library("tidyverse")
library("survival")
install.packages("tydiverse")
install.packages("tidyverse")
library("nlme", lib.loc="/usr/lib/R/library")
remove.packages("nlme", lib="/usr/lib/R/library")
remove.packages("nlme", lib="/usr/lib/R/library")
library("bootstrap")
setwd("~/Practical-courses/Stochastic_Lab_Course_2")
library("tidyverse")
student <- read.csv("student-mat.csv")
#Question(a)
#First we need to identify the distribution of each of G1, G2, G3
#We use Q-Q plots to do so. In order to use facet_wrap to plot into one panel, the dataset is refined as follow:
df1 <- data.frame(student$G1, rep('G1', nrow(student)))
colnames(df1) <- c("grades", "types")
df2 <- data.frame(student$G2, rep('G2', nrow(student)))
colnames(df2) <- c("grades", "types")
df3 <- data.frame(student$G3, rep('G3', nrow(student)))
colnames(df3) <- c("grades", "types")
df0 <- rbind(df1, df2, df3)
#Normal distributed?
ggplot(data = df0, mapping = aes(sample = grades)) +
geom_density(aes(x = grades), fill = "chartreuse") +
ggtitle("Emperical densities") +
theme(plot.title = element_text(hjust = 0.5)) + #to center the title on the plot
facet_wrap(. ~types)
ggplot(data = df0, mapping = aes(sample = grades)) +
stat_qq(distribution = stats::qnorm, dparams = list(mean = mean(df0$grades), sd = sd(df0$grades))) +
geom_abline(alpha = 0.25) +
ggtitle("Q-Q plot with normal theoretical distribution") +
theme(plot.title = element_text(hjust = 0.5)) + #to center the title on the plot
facet_wrap(. ~types)
#Poisson distributed?
ggplot(data = df0, mapping = aes(sample = grades)) +
stat_qq(distribution = stats::qpois, dparams = list(lambda = mean(df0$grades))) +
geom_abline(alpha = 0.25) +
ggtitle("Q-Q plot with Poisson as theoretical distribution") +
theme(plot.title = element_text(hjust = 0.5)) + #to center the title on the plot
facet_wrap(. ~types)
# Are there signs for over-dispersion or any other anomalies in the
#distributions of any of G1, G2, G3? Just check the plots and use mean and var.
#For the next question, we'll need the Anscombe residuals. R doesn't have a formula to generate
#these residuals, then we implement the anscombe residual formua for Poisson distribution
anscombe.residuals <- function(y, mu){
(3*(y**(2/3)-mu**(2/3)))/2*(mu**(1/6))
}
#Question(b)
model.1 <- glm(formula = G1 ~. -G2 -G3, family = poisson, data = student)
summary(model.1)
#Pearson residuals for model.1
pearson.resid <- residuals(model.1, "pearson")
df <- data.frame(pearson.resid)
ggplot(data = df, mapping = aes(sample = pearson.resid)) +
stat_qq(distribution = stats::qnorm, dparams = list(mean = mean(df$pearson.resid), sd = sd(df$pearson.resid))) +
geom_abline(alpha = 0.25) +
ggtitle("model 1 Pearson residuals Q-Q plot \n with normal theoretical distribution") +
theme(plot.title = element_text(hjust = 0.5)) #to center the title on the plot
#Anscombe residuals for model.1
ans.resid <- anscombe.residuals(student$G1, model.1$fitted.values)
dt <- data.frame(ans.resid)
ggplot(data = dt, mapping = aes(sample = ans.resid)) +
stat_qq(distribution = stats::qnorm, dparams = list(mean = mean(dt$ans.resid), sd = sd(dt$ans.resid))) +
geom_abline(alpha = 0.25) +
ggtitle("model 2 Anscombe residuals Q-Q plot \n with normal theoretical distribution") +
theme(plot.title = element_text(hjust = 0.5)) #to center the title on the plot
#residual analysis
plot(model.1)
model.2 <- glm(formula = G1 ~ sex + Fedu + studytime + failures + schoolsup + famsup + goout , family = poisson, data = student)
summary(model.2)
#Analysis of deviance
anova(model.2, model.1, test = "Chisq")
#model 3 and comparison with model 2
model.3 <- glm(formula = G1 ~ sex + Fedu + studytime + failures + schoolsup + famsup + Walc , family = poisson, data = student)
summary(model.3)
plot(model.3)
#residual analysis
plot(model.1)
setwd("~/Practical-courses/Stochastic_Lab_Course_2")
library("tidyverse")
library(tikzDevice)
student <- read.csv("student-mat.csv")
#Question(a)
#First we need to identify the distribution of each of G1, G2, G3
#We use Q-Q plots to do so. In order to use facet_wrap to plot into one panel, the dataset is refined as follow:
df1 <- data.frame(student$G1, rep('G1', nrow(student)))
colnames(df1) <- c("grades", "types")
df2 <- data.frame(student$G2, rep('G2', nrow(student)))
colnames(df2) <- c("grades", "types")
df3 <- data.frame(student$G3, rep('G3', nrow(student)))
colnames(df3) <- c("grades", "types")
df0 <- rbind(df1, df2, df3)
#Normal distributed?
plot1<- ggplot(data = df0, mapping = aes(sample = grades)) +
geom_density(aes(x = grades), fill = "chartreuse") +
ggtitle("Emperical densities") +
theme(plot.title = element_text(hjust = 0.5)) + #to center the title on the plot
facet_wrap(. ~types)
plot2<- ggplot(data = df0, mapping = aes(sample = grades)) +
stat_qq(distribution = stats::qnorm, dparams = list(mean = mean(df0$grades), sd = sd(df0$grades))) +
geom_abline(alpha = 0.25) +
ggtitle("Q-Q plot with normal theoretical distribution") +
theme(plot.title = element_text(hjust = 0.5)) + #to center the title on the plot
facet_wrap(. ~types)
#Poisson distributed?
plot3<- ggplot(data = df0, mapping = aes(sample = grades)) +
stat_qq(distribution = stats::qpois, dparams = list(lambda = mean(df0$grades))) +
geom_abline(alpha = 0.25) +
ggtitle("Q-Q plot with Poisson as theoretical distribution") +
theme(plot.title = element_text(hjust = 0.5)) + #to center the title on the plot
facet_wrap(. ~types)
# Are there signs for over-dispersion or any other anomalies in the
#distributions of any of G1, G2, G3? Just check the plots and use mean and var.
#For the next question, we'll need the Anscombe residuals. R doesn't have a formula to generate
#these residuals, then we implement the anscombe residual formua for Poisson distribution
anscombe.residuals <- function(y, mu){
(3*(y**(2/3)-mu**(2/3)))/2*(mu**(1/6))
}
#Question(b)
model.1 <- glm(formula = G1 ~. -G2 -G3, family = poisson, data = student)
summary(model.1)
#Pearson residuals for model.1
pearson.resid <- residuals(model.1, "pearson")
df <- data.frame(pearson.resid)
ggplot(data = df, mapping = aes(sample = pearson.resid)) +
stat_qq(distribution = stats::qnorm, dparams = list(mean = mean(df$pearson.resid), sd = sd(df$pearson.resid))) +
geom_abline(alpha = 0.25) +
ggtitle("model 1 Pearson residuals Q-Q plot \n with normal theoretical distribution") +
theme(plot.title = element_text(hjust = 0.5)) #to center the title on the plot
#Anscombe residuals for model.1
ans.resid <- anscombe.residuals(student$G1, model.1$fitted.values)
dt <- data.frame(ans.resid)
ggplot(data = dt, mapping = aes(sample = ans.resid)) +
stat_qq(distribution = stats::qnorm, dparams = list(mean = mean(dt$ans.resid), sd = sd(dt$ans.resid))) +
geom_abline(alpha = 0.25) +
ggtitle("model 2 Anscombe residuals Q-Q plot \n with normal theoretical distribution") +
theme(plot.title = element_text(hjust = 0.5)) #to center the title on the plot
#residual analysis
plot(model.1)
model.2 <- glm(formula = G1 ~ sex + Fedu + studytime + failures + schoolsup + famsup + goout , family = poisson, data = student)
summary(model.2)
#Analysis of deviance
anova(model.2, model.1, test = "Chisq")
#model 3 and comparison with model 2
model.3 <- glm(formula = G1 ~ sex + Fedu + studytime + failures + schoolsup + famsup + Walc , family = poisson, data = student)
summary(model.3)
plot(model.3)
dev.off()
tikz('Ex4plot2.tex',width=3.5, height=3, sanitize=TRUE)
plot2
dev.off()
tikz('Ex4plot3.tex',width=3.5, height=3, sanitize=TRUE)
plot3
dev.off()
