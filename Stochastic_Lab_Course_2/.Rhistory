install.packages("ggplot2")
install.packages("dplyr")
set.seed(250)
library("tidyverse")
##Question (a)
#Switch the default random number generator in R to Wichmann-Hill
RNGkind(kind = "Wichmann-Hill", normal.kind = NULL)
#Inversion method to simulate a binomial random variable
N = 1000
n = 10
p = 0.4
u <- runif(N)
bins <- .bincode(u, breaks = c(0, pbinom(0:10, 10, 0.4)), right = F, include.lowest = T)
bin_inv <- numeric()
for(i in 1:N){
bin_inv[i] <- bins[i]-1
}
#Simulation of a binomial random variable by simulating corresponding Bernoulli random variables by inversion method
bin_bern <- numeric()
for (i in 1:N){
v <- runif(n)
bin_bern[i] <- sum(v < p)
}
#Simulation of a binomial random variable with rbinom
bin_rbin <- rbinom(N, n, p)
#Plot the empirical pdf of all three samples on one panel
bin_inv <- data.frame(bin_inv)
str(bin_inv)
head(bin_inv)
rep(bin_inv, 1000)
bin_inv$method <- rep("bin_inv", 1000)
head(bin_inv)
colnames(bin_inv) <- c("rand_num", "method")
head(bin_inv)
bin_bern <- data.frame(bin_bern)
bin_bern$method <- rep("bin_bern", 1000)
colnames(bin_bern) <- c("rand_num", "method")
head(bin_bern)
bin_rbin <- data.frame(bin_rbin)
bin_rbin$method <- rep("bin_rbin", 1000)
colnames(bin_rbin) <- c("rand_num", "method")
head(bin_bern)
head(bin_rbin)
df <- rbind(bin_inv, bin_bern, bin_rbin)
head(df)
ggplot(df) +
geom_density(aes(x = rand_num, fill=method))
ggplot(df) +
geom_density(aes(x = rand_num, alpha=method))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.25)
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7)
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
scale_colour_manual(labels = c("urban", "rural", "hi"))# values = c("pink2", "green3", "blue"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
set.seed(250)
library("tidyverse")
##Question (a)
#Switch the default random number generator in R to Wichmann-Hill
RNGkind(kind = "Wichmann-Hill", normal.kind = NULL)
#Inversion method to simulate a binomial random variable
N = 1000
n = 10
p = 0.4
u <- runif(N)
bins <- .bincode(u, breaks = c(0, pbinom(0:10, 10, 0.4)), right = F, include.lowest = T)
bin_inv <- numeric()
for(i in 1:N){
bin_inv[i] <- bins[i]-1
}
#Simulation of a binomial random variable by simulating corresponding Bernoulli random variables by inversion method
bin_bern <- numeric()
for (i in 1:N){
v <- runif(n)
bin_bern[i] <- sum(v < p)
}
#Simulation of a binomial random variable with rbinom
bin_rbin <- rbinom(N, n, p)
#Plot the empirical pdf of all three samples on one panel
bin_inv <- data.frame(bin_inv)
bin_inv$method <- rep("bin_inv", 1000)
colnames(bin_inv) <- c("rand_num", "method")
bin_bern <- data.frame(bin_bern)
bin_bern$method <- rep("bin_bern", 1000)
colnames(bin_bern) <- c("rand_num", "method")
bin_rbin <- data.frame(bin_rbin)
bin_rbin$method <- rep("bin_rbin", 1000)
colnames(bin_rbin) <- c("rand_num", "method")
df <- rbind(bin_inv, bin_bern, bin_rbin)
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method")) +
theme_bw()
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method")) +
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Cylinders") +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation method") +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method") +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
#Plot the empirical pdf of all three samples on one panel
bin_inv <- data.frame(bin_inv)
bin_inv$method <- rep("inverse CDF", 1000)
colnames(bin_inv) <- c("rand_num", "method")
bin_bern <- data.frame(bin_bern)
bin_bern$method <- rep("From Bernoulli", 1000)
colnames(bin_bern) <- c("rbinom", "method")
bin_rbin <- data.frame(bin_rbin)
bin_rbin$method <- rep("bin_rbin", 1000)
colnames(bin_rbin) <- c("rand_num", "method")
df <- rbind(bin_inv, bin_bern, bin_rbin)
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method") +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
head(df)
#Plot the empirical pdf of all three samples on one panel
bin_inv <- data.frame(bin_inv)
bin_inv$method <- rep("inverse CDF", 1000)
colnames(bin_inv) <- c("rand_num", "method")
head(bin_inv )
head(bin_bern)
head(bin_rbin)
set.seed(250)
library("tidyverse")
##Question (a)
#Switch the default random number generator in R to Wichmann-Hill
RNGkind(kind = "Wichmann-Hill", normal.kind = NULL)
#Inversion method to simulate a binomial random variable
N = 1000
n = 10
p = 0.4
u <- runif(N)
bins <- .bincode(u, breaks = c(0, pbinom(0:10, 10, 0.4)), right = F, include.lowest = T)
bin_inv <- numeric()
for(i in 1:N){
bin_inv[i] <- bins[i]-1
}
#Simulation of a binomial random variable by simulating corresponding Bernoulli random variables by inversion method
bin_bern <- numeric()
for (i in 1:N){
v <- runif(n)
bin_bern[i] <- sum(v < p)
}
#Simulation of a binomial random variable with rbinom
bin_rbin <- rbinom(N, n, p)
#Plot the empirical pdf of all three samples on one panel
bin_inv <- data.frame(bin_inv)
bin_inv$method <- rep("inverse CDF", 1000)
colnames(bin_inv) <- c("rand_num", "method")
bin_bern <- data.frame(bin_bern)
bin_bern$method <- rep("From Bernoulli", 1000)
colnames(bin_bern) <- c("rand_num", "method")
bin_rbin <- data.frame(bin_rbin)
bin_rbin$method <- rep("rbinom", 1000)
colnames(bin_rbin) <- c("rand_num", "method")
df <- rbind(bin_inv, bin_bern, bin_rbin)
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method") +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method", title = "gggggggggggggggg") +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method", title = "empirical probability density functions of all
three samples") +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method", title = "empirical probability density functions of all three samples") +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method", title = "empirical probability density functions of all three samples", y = "random numbers") +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method", title = "empirical probability density functions of all three samples", ylab = "random numbers") +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method", title = "empirical probability density functions of all three samples", ylab = "random numbers") +
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method", title = "empirical probability density functions of all three samples", y = "random numbers")
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method", title = "empirical probability density functions of all three samples", y = "random numbers")
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method", title = "empirical probability density functions of all three samples", x = "random numbers")
ggplot(df) +
geom_density(aes(x = rand_num, color = method), alpha = 0.7) +
labs(color = "Simulation \n method", title = "empirical probability density functions of all three samples", x = "random numbers")
ggplot(df) +
geom_density(aes(x = rand_num, color = method), alpha = 1) +
labs(color = "Simulation \n method", title = "empirical probability density functions of all three samples", x = "random numbers")
ggplot(df) +
geom_density(aes(x = rand_num, color = method)) +
labs(color = "Simulation \n method", title = "empirical probability density functions of all three samples", x = "random numbers")
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method", title = "empirical probability density functions of all three samples", x = "random numbers")
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.5) +
labs(fill = "Simulation \n method", title = "empirical probability density functions of all three samples", x = "random numbers")
?RNGkind
#Switch the random number generator back to its default
RNGkind(kind = "default", normal.kind = NULL)
#Inversion method to simulate a binomial random variable
N = 1000
n = 10
p = 0.4
u <- runif(N)
bins <- .bincode(u, breaks = c(0, pbinom(0:10, 10, 0.4)), right = F, include.lowest = T)
bin_inv <- numeric()
for(i in 1:N){
bin_inv[i] <- bins[i]-1
}
#Simulation of a binomial random variable by simulating corresponding Bernoulli random variables by inversion method
bin_bern <- numeric()
for (i in 1:N){
v <- runif(n)
bin_bern[i] <- sum(v < p)
}
#Simulation of a binomial random variable with rbinom
bin_rbin <- rbinom(N, n, p)
#Plot the empirical pdf of all three samples on one panel
bin_inv <- data.frame(bin_inv)
bin_inv$method <- rep("inverse CDF", 1000)
colnames(bin_inv) <- c("rand_num", "method")
bin_bern <- data.frame(bin_bern)
bin_bern$method <- rep("From Bernoulli", 1000)
colnames(bin_bern) <- c("rand_num", "method")
bin_rbin <- data.frame(bin_rbin)
bin_rbin$method <- rep("rbinom", 1000)
colnames(bin_rbin) <- c("rand_num", "method")
df <- rbind(bin_inv, bin_bern, bin_rbin)
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.5) +
labs(fill = "Simulation \n method", title = "empirical probability density functions of all three samples", x = "random numbers")
install.packages("survival")
library("survival", lib.loc="/usr/lib/R/library")
detach("package:survival", unload=TRUE)
library("proxy", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
detach("package:proxy", unload=TRUE)
library("survival", lib.loc="/usr/lib/R/library")
detach("package:survival", unload=TRUE)
library("survival", lib.loc="/usr/lib/R/library")
detach("package:survival", unload=TRUE)
library("survival", lib.loc="/usr/lib/R/library")
detach("package:survival", unload=TRUE)
library("survival", lib.loc="/usr/lib/R/library")
detach("package:survival", unload=TRUE)
library("survival", lib.loc="/usr/lib/R/library")
detach("package:survival", unload=TRUE)
library("survival", lib.loc="/usr/lib/R/library")
library("survival", lib.loc="/usr/lib/R/library")
detach("package:survival", unload=TRUE)
library("survival", lib.loc="/usr/lib/R/library")
detach("package:survival", unload=TRUE)
remove.packages("survival", lib="/usr/lib/R/library")
remove.packages("survival", lib="/usr/lib/R/library")
.libPaths(proxy)
.libPaths("proxy")
.libPaths("ggplot2")
?.libPaths()
library("tidyverse")
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
library("survival", lib.loc="/usr/lib/R/library")
library("dplyr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
library("tidyverse", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
detach("package:tidyverse", unload=TRUE)
library("tidyverse", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
remove.packages("tidyverse", lib="~/R/x86_64-pc-linux-gnu-library/3.5")
remove.packages("survival", lib="/usr/lib/R/library")
remove.packages("survival", lib="/usr/lib/R/library")
remove.packages("survival", lib="/usr/lib/R/library")
remove.packages("survival", lib="/usr/lib/R/library")
install.packages("survival")
remove.packages("lattice", lib="/usr/lib/R/library")
remove.packages("lattice", lib="/usr/lib/R/library")
remove.packages("lattice", lib="/usr/lib/R/library")
install.packages("lattice")
library("lattice", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
remove.packages("lattice", lib="/usr/lib/R/library")
install.packages("survival")
library("survival", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
remove.packages("survival", lib="/usr/lib/R/library")
detach("package:survival", unload=TRUE)
library("tidyverse")
library("survival")
install.packages("tydiverse")
install.packages("tidyverse")
library("nlme", lib.loc="/usr/lib/R/library")
remove.packages("nlme", lib="/usr/lib/R/library")
remove.packages("nlme", lib="/usr/lib/R/library")
setwd("~/Practical-courses/Stochastic_Lab_Course_2")
set.seed(250)
library("tidyverse")
library(tikzDevice) # To export plots as .tex files
##Question (a)
#Switch the default random number generator in R to Wichmann-Hill
RNGkind(kind = "Wichmann-Hill", normal.kind = NULL)
#Inversion method to simulate a binomial random variable
N = 1000
n = 10
p = 0.4
u <- runif(N)
bins <- .bincode(u, breaks = c(0, pbinom(0:10, 10, 0.4)), right = F, include.lowest = T)
bin_inv <- numeric()
for(i in 1:N){
bin_inv[i] <- bins[i]-1
}
#Simulation of a binomial random variable by simulating corresponding Bernoulli random variables by inversion method
bin_bern <- numeric()
for (i in 1:N){
v <- runif(n)
bin_bern[i] <- sum(v < p)
}
#Simulation of a binomial random variable with rbinom
bin_rbin <- rbinom(N, n, p)
#Plot the histograms of all three samples on one panel
bin_inv <- data.frame(bin_inv)
bin_inv$method <- rep("inverse CDF", 1000)
colnames(bin_inv) <- c("rand_num", "method")
bin_bern <- data.frame(bin_bern)
bin_bern$method <- rep("From Bernoulli", 1000)
colnames(bin_bern) <- c("rand_num", "method")
bin_rbin <- data.frame(bin_rbin)
bin_rbin$method <- rep("rbinom", 1000)
colnames(bin_rbin) <- c("rand_num", "method")
df <- rbind(bin_inv, bin_bern, bin_rbin)
plot1 <- ggplot(df, aes(x = rand_num, fill = method)) +
geom_histogram( binwidth=.5, position="dodge")
#Switch the random number generator back to its default
RNGkind(kind = "default", normal.kind = NULL)
##Question(b)
f <- function(x){
((2*pi)^(-1/2))*exp(-(x^2)/2)
}
g <- function(x){
(pi*(1 + x^2))^(-1)
}
#First determine the best value of the constant c, such that f(x) <= g(x)
x <- -1500:1500
c <- max(f(x)/g(x))
c
