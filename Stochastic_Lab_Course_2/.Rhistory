library("nlme", lib.loc="/usr/lib/R/library")
remove.packages("nlme", lib="/usr/lib/R/library")
remove.packages("nlme", lib="/usr/lib/R/library")
library("bootstrap")
plot(function(x){((2*pi)^(-1/2))*(exp((-x**2)/2))})
plot(function(x){(0.75*(1-x**2))*i(x)})
#Question (a)
#Implement kernel density estimation in a function that depends on the sample, bandwidth and a kernel
i <- function(x){ifelse((abs(x)<=1),1,0)}
plot(function(x){(0.75*(1-x**2))*i(x)})
plot(function(x){(1-abs(x))*i(x)})
?GCV
??GCV
?rowSums
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
x
library(Matrix)
?colSums
M <- bdiag(Diagonal(2), matrix(1:3, 3,4), diag(3:2))
M
#To remove some users, we first find the submatrix such that rowSums(M) >= 80 and colSums(M) >= 150
repeat {
i <- sum(dim(M))
M <- M[rowSums(M) >= 80, colSums(M) >= 150]
if (sum(dim(M)) == i) break
}
M
rowSums(M)
M <- bdiag(Diagonal(2), matrix(1:3, 3,4), diag(3:2))
rowSums(M)
colSums(M)
#To remove some users, we first find the submatrix such that rowSums(M) >= 80 and colSums(M) >= 150
repeat {
i <- sum(dim(M))
Q <- M[rowSums(M) >= 4, colSums(M) >= 6]
if (sum(dim(Q)) == i) break
}
M
#To remove some users, we first find the submatrix such that rowSums(M) >= 80 and colSums(M) >= 150
repeat {
i <- sum(dim(M))
M <- M[rowSums(M) >= 4, colSums(M) >= 6]
if (sum(dim(M)) == i) break
}
M
M <- bdiag(Diagonal(2), matrix(1:3, 3,4), diag(3:2))
M[rowSums(M) >= 4, colSums(M) >= 6]
M
M[rowSums(M) >= 4, colSums(M) >= 6]
setwd("~/stochlab2")
library(Matrix)
library(pls)
library(tidyverse)
setwd("~/Practical-courses/Stochastic_Lab_Course_2")
library("tidyverse")
library("survival")
library(ggfortify) #for the function autoplot for objects of type survfit
thor <- read.delim("Thoracic.txt", sep = " ")
thor <- thor %>%
dplyr::select(c(T.2, X60, F.7))
colnames(thor) <- c("PRE30", "AGE", "Risk1Y")
#Question(a)
#Computing nonparametric estimators of the survivor function: Kaplan-Meier
km <- survfit(Surv(AGE, Risk1Y) ~ 1, data = thor, type = "kaplan-meier")
#Computing nonparametric estimators of the survivor function: Flemming-Harrington
fh <- survfit(Surv(AGE, Risk1Y) ~ 1, data = thor, type = "fleming-harrington")
#plot of km and fh
plot(km, col = "blue")
lines(fh, col='red')
legend( par("usr")[2], par("usr")[4], yjust=3, xjust=1.6,
c("Kaplan-Meier", "Fleming-Harrington"),
lwd=c(1,1), lty=c(1,1),
col=c("blue", 'red'))
title(main="nonparametric estimators of the survivor function")
#fit the exponential model to the data
exp_fit <- survreg(Surv(AGE, Risk1Y) ~ 1, data = thor, dist="exponential")
lam_hat_exp <- exp(-exp_fit$coefficients)
fit.dat.exp <- exp(-lam_hat_exp*c(0:90))
#fit the Weibull model to the data
wei_fit <- survreg(Surv(AGE, Risk1Y) ~ 1, data = thor, dist="weibull")
lam_hat_wei <- exp(-wei_fit$coefficients)
alpha <- 1/wei_fit$scale
fit.dat.wei <- exp(-(lam_hat_wei*c(0:90))^alpha)
#plot
plot(km, col = "blue")
lines(fh, col='red')
lines(fit.dat.exp, col = "green")
lines(fit.dat.wei, col = "black")
legend("bottomleft", inset=.02,
legend =  c("Kaplan-Meier", "Fleming-Harrington", "Exponential", "Weibull"),
col =  c("blue", "red", "green", "black"),
lwd=c(1,1), lty=c(1,1),
box.lty=0)
title(main="nonparametric & parametric estimators \n of the survivor function")
#Use appropriate graphical tools to check if the Weibull model is adequate for the data
plot(log(km$time) ,log(-log(km$surv)), col = "red")
abline(a = alpha*log(lam_hat_wei), b = alpha, col = "blue" )
#Question(b)
#How large is the proportion of smokers in the sample
sum(thor$PRE30)/nrow(thor)
#Kaplan-Meier estimators for each group
km_smoker_fit <- survfit(Surv(AGE, Risk1Y) ~ PRE30, data = thor)
#plot on one plot together with the corresponding confidence bands
autoplot(km_smoker_fit) +
ggtitle("Smokers based Survival") +
labs(x = "Time", y = "Survival Probability") +
guides(fill=FALSE) +
labs(colour = "Smoker")
#Test formally if the survival time depends on being a smoker using the log-rank test
survdiff(Surv(AGE, Risk1Y) ~ PRE30, data = thor, rho=0)
#Fit the Weibull model to both groups: we do it by spliting the data into smokers and non-smokers
thor.smokers <- thor %>%
filter(PRE30 == "TRUE")
thor.nonsmokers <- thor %>%
filter(PRE30 == "FALSE")
#fitting the Weibull model to smokers' group
wei_smokers_fit <- survreg(Surv(AGE, Risk1Y) ~ 1, data = thor.smokers, dist="weibull")
lam_hat_wei_smokers <- exp(-wei_smokers_fit$coefficients)
alpha_smokers <- 1/wei_smokers_fit$scale
fit.dat.wei.smokers <- exp(-(lam_hat_wei_smokers*c(0:90))^alpha_smokers)
#fitting the Weibull model to nonsmokers' group
wei_nonsmokers_fit <- survreg(Surv(AGE, Risk1Y) ~ 1, data = thor.nonsmokers, dist="weibull")
lam_hat_wei_nonsmokers <- exp(-wei_nonsmokers_fit$coefficients)
alpha_nonsmokers <- 1/wei_nonsmokers_fit$scale
fit.dat.wei.nonsmokers <- exp(-(lam_hat_wei_nonsmokers*c(0:90))^alpha_nonsmokers)
#Computing nonparametric estimators of the survivor function: Kaplan-Meier
km_smokers <- survfit(Surv(AGE, Risk1Y) ~ PRE30, data = thor.smokers, type = "kaplan-meier")
km_nonsmokers <- survfit(Surv(AGE, Risk1Y) ~ PRE30, data = thor.nonsmokers, type = "kaplan-meier")
#plot
plot(fit.dat.wei.smokers, col = "blue", type = "l")
lines(fit.dat.wei.nonsmokers, col='red')
lines(km_smokers, col = "green")
lines(km_nonsmokers, col = "black")
legend("bottomleft", inset=.0001,
legend =  c("Weibull smokers", "Weibull nonsmokers", "km smokers", "km nonsmokers"),
col =  c("blue", "red", "green", "black"),
lwd=c(1,1), lty=c(1,1),
box.lty=0)
title(main="nonparametric & parametric estimators \n of the survivor function by group")
#Is the Weibull model an appropriate assumption in both groups
plot(log(km_smokers$time) ,log(-log(km_smokers$surv)), col = "red")
abline(a = alpha_smokers*log(lam_hat_wei_smokers), b = alpha_smokers, col = "blue" )
title(main="Checking Weibull if weibull is appropriate \n for smokers' group")
plot(log(km_nonsmokers$time) ,log(-log(km_nonsmokers$surv)), col = "red")
abline(a = alpha_nonsmokers*log(lam_hat_wei_nonsmokers), b = alpha_nonsmokers, col = "blue" )
title(main="Checking Weibull if weibull is appropriate \n for nonsmokers' group")
df <- data.frame(log(km_smokers$time) ,log(-log(km_smokers$surv)))
df1 <- data.frame(A=log(km_smokers$time) ,B=log(-log(km_smokers$surv)))
df2 <- data.frame(a = alpha_smokers*log(lam_hat_wei_smokers), b = alpha_smokers)
ggplot(df1) +
geom_point(aes(x=A, y=B))
geom_abline(df2 ,aes(x=a, y=b))
geom_abline(data = df2 ,aes(x=a, y=b))
ggplot(df1) +
geom_point(aes(x=A, y=B)) +
geom_abline(df2 ,aes(x=a, y=b))
ggplot(df1) +
geom_point(aes(x=A, y=B)) +
geom_abline(data = df2 ,aes(x=a, y=b))
ggplot(df1) +
geom_point(aes(x=A, y=B)) +
geom_abline(intercept = alpha_smokers*log(lam_hat_wei_smokers), slope = alpha_smokers)
ggplot(df2) +
geom_point(aes(x=A, y=B)) +
geom_abline(intercept = alpha_nonsmokers*log(lam_hat_wei_nonsmokers), slope = alpha_nonsmokers)
df2 <- data.frame(A=log(km_nonsmokers$time) ,B=log(-log(km_nonsmokers$surv)))
ggplot(df2) +
geom_point(aes(x=A, y=B)) +
geom_abline(intercept = alpha_nonsmokers*log(lam_hat_wei_nonsmokers), slope = alpha_nonsmokers)
plot(log(km_nonsmokers$time) ,log(-log(km_nonsmokers$surv)), col = "red")
ggplot(df2) +
geom_point(aes(x=A, y=B), color = blue) +
geom_abline(intercept = alpha_nonsmokers*log(lam_hat_wei_nonsmokers), slope = alpha_nonsmokers)
ggplot(df2) +
geom_point(aes(x=A, y=B), color = 'blue') +
geom_abline(intercept = alpha_nonsmokers*log(lam_hat_wei_nonsmokers), slope = alpha_nonsmokers)
ggplot(df1) +
geom_point(aes(x=A, y=B), color = 'blue') +
geom_abline(intercept = alpha_smokers*log(lam_hat_wei_smokers), slope = alpha_smokers, color = 'green')
ggplot(df1) +
geom_point(aes(x=A, y=B), color = 'blue') +
geom_abline(intercept = alpha_smokers*log(lam_hat_wei_smokers), slope = alpha_smokers, color = 'purple')
ggplot(df2) +
geom_point(aes(x=A, y=B), color = 'blue') +
geom_abline(intercept = alpha_nonsmokers*log(lam_hat_wei_nonsmokers), slope = alpha_nonsmokers, color = 'purple')
setwd("~/Practical-courses/Stochastic_Lab_Course_2")
library("tidyverse")
library("survival")
library(ggfortify) #for the function autoplot for objects of type survfit
thor <- read.delim("Thoracic.txt", sep = " ")
thor <- thor %>%
dplyr::select(c(T.2, X60, F.7))
colnames(thor) <- c("PRE30", "AGE", "Risk1Y")
#Question(a)
#Computing nonparametric estimators of the survivor function: Kaplan-Meier
km <- survfit(Surv(AGE, Risk1Y) ~ 1, data = thor, type = "kaplan-meier")
#Computing nonparametric estimators of the survivor function: Flemming-Harrington
fh <- survfit(Surv(AGE, Risk1Y) ~ 1, data = thor, type = "fleming-harrington")
#plot of km and fh
plot(km, col = "blue")
lines(fh, col='red')
legend( par("usr")[2], par("usr")[4], yjust=3, xjust=1.6,
c("Kaplan-Meier", "Fleming-Harrington"),
lwd=c(1,1), lty=c(1,1),
col=c("blue", 'red'))
title(main="nonparametric estimators of the survivor function")
#fit the exponential model to the data
exp_fit <- survreg(Surv(AGE, Risk1Y) ~ 1, data = thor, dist="exponential")
lam_hat_exp <- exp(-exp_fit$coefficients)
fit.dat.exp <- exp(-lam_hat_exp*c(0:90))
#fit the Weibull model to the data
wei_fit <- survreg(Surv(AGE, Risk1Y) ~ 1, data = thor, dist="weibull")
lam_hat_wei <- exp(-wei_fit$coefficients)
alpha <- 1/wei_fit$scale
fit.dat.wei <- exp(-(lam_hat_wei*c(0:90))^alpha)
#plot
plot(km, col = "blue")
lines(fh, col='red')
lines(fit.dat.exp, col = "green")
lines(fit.dat.wei, col = "black")
legend("bottomleft", inset=.02,
legend =  c("Kaplan-Meier", "Fleming-Harrington", "Exponential", "Weibull"),
col =  c("blue", "red", "green", "black"),
lwd=c(1,1), lty=c(1,1),
box.lty=0)
title(main="nonparametric & parametric estimators \n of the survivor function")
#Use appropriate graphical tools to check if the Weibull model is adequate for the data
plot(log(km$time) ,log(-log(km$surv)), col = "red")
abline(a = alpha*log(lam_hat_wei), b = alpha, col = "blue" )
#Question(b)
#How large is the proportion of smokers in the sample
sum(thor$PRE30)/nrow(thor)
#Kaplan-Meier estimators for each group
km_smoker_fit <- survfit(Surv(AGE, Risk1Y) ~ PRE30, data = thor)
#plot on one plot together with the corresponding confidence bands
autoplot(km_smoker_fit) +
ggtitle("Smokers based Survival") +
labs(x = "Time", y = "Survival Probability") +
guides(fill=FALSE) +
labs(colour = "Smoker")
#Test formally if the survival time depends on being a smoker using the log-rank test
survdiff(Surv(AGE, Risk1Y) ~ PRE30, data = thor, rho=0)
#Fit the Weibull model to both groups: we do it by spliting the data into smokers and non-smokers
thor.smokers <- thor %>%
filter(PRE30 == "TRUE")
thor.nonsmokers <- thor %>%
filter(PRE30 == "FALSE")
#fitting the Weibull model to smokers' group
wei_smokers_fit <- survreg(Surv(AGE, Risk1Y) ~ 1, data = thor.smokers, dist="weibull")
lam_hat_wei_smokers <- exp(-wei_smokers_fit$coefficients)
alpha_smokers <- 1/wei_smokers_fit$scale
fit.dat.wei.smokers <- exp(-(lam_hat_wei_smokers*c(0:90))^alpha_smokers)
#fitting the Weibull model to nonsmokers' group
wei_nonsmokers_fit <- survreg(Surv(AGE, Risk1Y) ~ 1, data = thor.nonsmokers, dist="weibull")
lam_hat_wei_nonsmokers <- exp(-wei_nonsmokers_fit$coefficients)
alpha_nonsmokers <- 1/wei_nonsmokers_fit$scale
fit.dat.wei.nonsmokers <- exp(-(lam_hat_wei_nonsmokers*c(0:90))^alpha_nonsmokers)
#Computing nonparametric estimators of the survivor function: Kaplan-Meier
km_smokers <- survfit(Surv(AGE, Risk1Y) ~ PRE30, data = thor.smokers, type = "kaplan-meier")
km_nonsmokers <- survfit(Surv(AGE, Risk1Y) ~ PRE30, data = thor.nonsmokers, type = "kaplan-meier")
#plot
plot(fit.dat.wei.smokers, col = "blue", type = "l")
lines(fit.dat.wei.nonsmokers, col='red')
lines(km_smokers, col = "green")
lines(km_nonsmokers, col = "black")
legend("bottomleft", inset=.0001,
legend =  c("Weibull smokers", "Weibull nonsmokers", "km smokers", "km nonsmokers"),
col =  c("blue", "red", "green", "black"),
lwd=c(1,1), lty=c(1,1),
box.lty=0)
title(main="nonparametric & parametric estimators \n of the survivor function by group")
#"Checking Weibull if weibull is appropriate \n for smokers' group"
df1 <- data.frame(A=log(km_smokers$time) ,B=log(-log(km_smokers$surv)))
ggplot(df1) +
geom_point(aes(x=A, y=B), color = 'blue') +
geom_abline(intercept = alpha_smokers*log(lam_hat_wei_smokers), slope = alpha_smokers, color = 'purple')
#Checking Weibull if weibull is appropriate \n for nonsmokers' group
df2 <- data.frame(A=log(km_nonsmokers$time) ,B=log(-log(km_nonsmokers$surv)))
ggplot(df2) +
geom_point(aes(x=A, y=B), color = 'blue') +
geom_abline(intercept = alpha_nonsmokers*log(lam_hat_wei_nonsmokers), slope = alpha_nonsmokers, color = 'purple')
ggplot(df2) +
geom_point(aes(x=A, y=B)) +
geom_abline(intercept = alpha_nonsmokers*log(lam_hat_wei_nonsmokers), slope = alpha_nonsmokers, color = 'purple')
ggplot(df2) +
geom_point(aes(x=A, y=B)) +
geom_abline(intercept = alpha_nonsmokers*log(lam_hat_wei_nonsmokers), slope = alpha_nonsmokers, color = 'purple')+
scale_colour_manual(name = "Parametric \nfit degree ", values = c("green", "orange","blue")) +
xlab("Time(minutes)") +
ylab("Order Parameter") +
theme_classic(base_size = 12) + #font size
theme(legend.key = element_rect(fill = "white", colour = "gray19"))  #legend keys editing
ggplot(df2) +
geom_point(aes(x=A, y=B)) +
geom_abline(intercept = alpha_nonsmokers*log(lam_hat_wei_nonsmokers), slope = alpha_nonsmokers, color = 'purple')+
scale_colour_manual(name = "Parametric \nfit degree ", values = c("green", "orange","blue")) +
xlab("Time(minutes)") +
ylab("Order Parameter") +
theme(legend.key = element_rect(fill = "white", colour = "gray19"))  #legend keys editing
ggplot(df2) +
geom_point(aes(x=A, y=B)) +
geom_abline(intercept = alpha_nonsmokers*log(lam_hat_wei_nonsmokers), slope = alpha_nonsmokers, color = 'purple')+
scale_colour_manual(name = "Parametric \nfit degree ", values = c("green", "orange","blue")) +
xlab("AAAA") +
ylab("BBBB") +
theme(legend.key = element_rect(fill = "white", colour = "gray19"))  #legend keys editing
ggplot(df2) +
geom_point(aes(x=A, y=B)) +
geom_abline(intercept = alpha_nonsmokers*log(lam_hat_wei_nonsmokers), slope = alpha_nonsmokers, color = 'purple')+
scale_colour_manual(name = "Parametric \nfit degree ", values = c('purple')) +
xlab("AAAA") +
ylab("BBBB") +
theme(legend.key = element_rect(fill = "white", colour = "gray19"))  #legend keys editing
ggplot(df2) +
geom_point(aes(x=A, y=B)) +
geom_abline(intercept = alpha_nonsmokers*log(lam_hat_wei_nonsmokers), slope = alpha_nonsmokers, color = 'purple')+
scale_colour_manual(name = "Parametric \nfit degree ", values = c("purple")) +
xlab("AAAA") +
ylab("BBBB") +
theme(legend.key = element_rect(fill = "white", colour = "gray19"))  #legend keys editing
ggplot(df2) +
geom_point(aes(x=A, y=B)) +
geom_abline(aes(intercept = alpha_nonsmokers*log(lam_hat_wei_nonsmokers), slope = alpha_nonsmokers, color = 'purple'))+
scale_colour_manual(name = "Parametric \nfit degree ", values = c("purple")) +
xlab("AAAA") +
ylab("BBBB") +
theme(legend.key = element_rect(fill = "white", colour = "gray19"))  #legend keys editing
ggplot(df2) +
geom_point(aes(x=A, y=B)) +
geom_abline(aes(intercept = alpha_nonsmokers*log(lam_hat_wei_nonsmokers), slope = alpha_nonsmokers, color = 'purple'))+
scale_colour_manual(name = "Parametric \nfit degree ", values = c("purple")) +
xlab("AAAA") +
ylab("BBBB") +
theme(legend.position = c(0.4, 0.95),legend.justification = c("right", "top"), legend.key = element_rect(fill = "white", colour = "gray19"))
ggplot(df2) +
geom_point(aes(x=A, y=B)) +
geom_abline(aes(intercept = alpha_nonsmokers*log(lam_hat_wei_nonsmokers), slope = alpha_nonsmokers, color = 'D'))+
scale_colour_manual(name = "Parametric \nfit degree ", values = c("purple")) +
xlab("AAAA") +
ylab("BBBB") +
theme(legend.position = c(0.4, 0.95),legend.justification = c("right", "top"), legend.key = element_rect(fill = "white", colour = "gray19"))
ggplot(df2) +
geom_point(aes(x=A, y=B)) +
geom_abline(aes(intercept = alpha_nonsmokers*log(lam_hat_wei_nonsmokers), slope = alpha_nonsmokers, color = 'D'))+
scale_colour_manual( values = c("purple")) +
xlab("AAAA") +
ylab("BBBB") +
theme(legend.position = c(0.4, 0.95),legend.justification = c("right", "top"), legend.key = element_rect(fill = "white", colour = "gray19"))
ggplot(df2) +
geom_point(aes(x=A, y=B)) +
geom_abline(aes(intercept = alpha_nonsmokers*log(lam_hat_wei_nonsmokers), slope = alpha_nonsmokers, color = 'D'))+
scale_colour_manual(name = " ", values = c("purple")) +
xlab("AAAA") +
ylab("BBBB") +
theme(legend.position = c(0.4, 0.95),legend.justification = c("right", "top"), legend.key = element_rect(fill = "white", colour = "gray19"))
theme(legend.key = element_rect(fill = "white", colour = "gray19", size = "0.5"))  #legend keys editing
ggplot(df2) +
geom_point(aes(x=A, y=B)) +
geom_abline(aes(intercept = alpha_nonsmokers*log(lam_hat_wei_nonsmokers), slope = alpha_nonsmokers, color = 'D'))+
scale_colour_manual(name = " ", values = c("purple")) +
xlab("AAAA") +
ylab("BBBB") +
theme(legend.position = c(0.4, 0.95),legend.justification = c("right", "top"), legend.key = element_rect(fill = "white", colour = "gray19", size = "0.5"))
ggplot(df2) +
geom_point(aes(x=A, y=B)) +
geom_abline(aes(intercept = alpha_nonsmokers*log(lam_hat_wei_nonsmokers), slope = alpha_nonsmokers, color = 'D'))+
scale_colour_manual(name = " ", values = c("purple")) +
xlab("AAAA") +
ylab("BBBB") +
theme(legend.position = c(0.4, 0.95),legend.justification = c("right", "top"), legend.key = element_rect(fill = "white", colour = "gray19"), size = "0.5")
ggplot(df2) +
geom_point(aes(x=A, y=B)) +
geom_abline(aes(intercept = alpha_nonsmokers*log(lam_hat_wei_nonsmokers), slope = alpha_nonsmokers, color = 'D'))+
scale_colour_manual(name = " ", values = c("purple")) +
xlab("AAAA") +
ylab("BBBB") +
theme(legend.position = c(0.4, 0.95),legend.justification = c("right", "top"), legend.key = element_rect(fill = "white", colour = "gray19"))
ggplot(df2) +
geom_point(aes(x=A, y=B)) +
geom_abline(aes(intercept = alpha_nonsmokers*log(lam_hat_wei_nonsmokers), slope = alpha_nonsmokers, color = 'D'))+
scale_colour_manual(name = " ", values = c("purple")) +
xlab("AAAA") +
ylab("BBBB") +
theme(legend.position = c(0.1, 0.95),legend.justification = c("right", "top"), legend.key = element_rect(fill = "white", colour = "gray19"))
ggplot(df2) +
geom_point(aes(x=A, y=B)) +
geom_abline(aes(intercept = alpha_nonsmokers*log(lam_hat_wei_nonsmokers), slope = alpha_nonsmokers, color = 'D'))+
scale_colour_manual(name = " ", values = c("purple")) +
xlab("AAAA") +
ylab("BBBB") +
theme(legend.position = c(0.2, 0.95),legend.justification = c("right", "top"), legend.key = element_rect(fill = "white", colour = "gray19"))
ggplot(df1) +
geom_point(aes(x=A, y=B)) +
geom_abline(aes(intercept = alpha_smokers*log(lam_hat_wei_smokers), slope = alpha_smokers, color = 'D1'))
ggplot(df1) +
geom_point(aes(x=A, y=B)) +
geom_abline(aes(intercept = alpha_smokers*log(lam_hat_wei_smokers), slope = alpha_smokers, color = 'D1'))+
scale_colour_manual(name = " ", values = c("purple")) +
xlab("AAAA") +
ylab("BBBB") +
theme(legend.position = c(0.2, 0.95),legend.justification = c("right", "top"), legend.key = element_rect(fill = "white", colour = "gray19"))
ggplot(df1) +
geom_point(aes(x=A, y=B)) +
geom_abline(aes(intercept = alpha_smokers*log(lam_hat_wei_smokers), slope = alpha_smokers, color = 'D1'))+
scale_colour_manual(name = " ", values = c("purple")) +
xlab("AA") +
ylab("BB") +
theme(legend.position = c(0.2, 0.95),legend.justification = c("right", "top"), legend.key = element_rect(fill = "white", colour = "gray19"))
setwd("~/Practical-courses/Stochastic_Lab_Course_2")
library("tidyverse")
library("survival")
library(ggfortify) #for the function autoplot for objects of type survfit
thor <- read.delim("Thoracic.txt", sep = " ")
thor <- thor %>%
dplyr::select(c(T.2, X60, F.7))
colnames(thor) <- c("PRE30", "AGE", "Risk1Y")
#Question(a)
#Computing nonparametric estimators of the survivor function: Kaplan-Meier
km <- survfit(Surv(AGE, Risk1Y) ~ 1, data = thor, type = "kaplan-meier")
#Computing nonparametric estimators of the survivor function: Flemming-Harrington
fh <- survfit(Surv(AGE, Risk1Y) ~ 1, data = thor, type = "fleming-harrington")
#plot of km and fh
plot(km, col = "blue")
lines(fh, col='red')
legend( par("usr")[2], par("usr")[4], yjust=3, xjust=1.6,
c("Kaplan-Meier", "Fleming-Harrington"),
lwd=c(1,1), lty=c(1,1),
col=c("blue", 'red'))
title(main="nonparametric estimators of the survivor function")
#fit the exponential model to the data
exp_fit <- survreg(Surv(AGE, Risk1Y) ~ 1, data = thor, dist="exponential")
lam_hat_exp <- exp(-exp_fit$coefficients)
fit.dat.exp <- exp(-lam_hat_exp*c(0:90))
#fit the Weibull model to the data
wei_fit <- survreg(Surv(AGE, Risk1Y) ~ 1, data = thor, dist="weibull")
lam_hat_wei <- exp(-wei_fit$coefficients)
alpha <- 1/wei_fit$scale
fit.dat.wei <- exp(-(lam_hat_wei*c(0:90))^alpha)
#plot
plot(km, col = "blue")
lines(fh, col='red')
lines(fit.dat.exp, col = "green")
lines(fit.dat.wei, col = "black")
legend("bottomleft", inset=.02,
legend =  c("Kaplan-Meier", "Fleming-Harrington", "Exponential", "Weibull"),
col =  c("blue", "red", "green", "black"),
lwd=c(1,1), lty=c(1,1),
box.lty=0)
title(main="nonparametric & parametric estimators \n of the survivor function")
#Use appropriate graphical tools to check if the Weibull model is adequate for the data
plot(log(km$time) ,log(-log(km$surv)), col = "red")
abline(a = alpha*log(lam_hat_wei), b = alpha, col = "blue" )
#Question(b)
#How large is the proportion of smokers in the sample
sum(thor$PRE30)/nrow(thor)
#Kaplan-Meier estimators for each group
km_smoker_fit <- survfit(Surv(AGE, Risk1Y) ~ PRE30, data = thor)
#plot on one plot together with the corresponding confidence bands
autoplot(km_smoker_fit) +
ggtitle("Smokers based Survival") +
labs(x = "Time", y = "Survival Probability") +
guides(fill=FALSE) +
labs(colour = "Smoker")
#Test formally if the survival time depends on being a smoker using the log-rank test
survdiff(Surv(AGE, Risk1Y) ~ PRE30, data = thor, rho=0)
#Fit the Weibull model to both groups: we do it by spliting the data into smokers and non-smokers
thor.smokers <- thor %>%
filter(PRE30 == "TRUE")
thor.nonsmokers <- thor %>%
filter(PRE30 == "FALSE")
#fitting the Weibull model to smokers' group
wei_smokers_fit <- survreg(Surv(AGE, Risk1Y) ~ 1, data = thor.smokers, dist="weibull")
lam_hat_wei_smokers <- exp(-wei_smokers_fit$coefficients)
alpha_smokers <- 1/wei_smokers_fit$scale
fit.dat.wei.smokers <- exp(-(lam_hat_wei_smokers*c(0:90))^alpha_smokers)
#fitting the Weibull model to nonsmokers' group
wei_nonsmokers_fit <- survreg(Surv(AGE, Risk1Y) ~ 1, data = thor.nonsmokers, dist="weibull")
lam_hat_wei_nonsmokers <- exp(-wei_nonsmokers_fit$coefficients)
alpha_nonsmokers <- 1/wei_nonsmokers_fit$scale
fit.dat.wei.nonsmokers <- exp(-(lam_hat_wei_nonsmokers*c(0:90))^alpha_nonsmokers)
#Computing nonparametric estimators of the survivor function: Kaplan-Meier
km_smokers <- survfit(Surv(AGE, Risk1Y) ~ PRE30, data = thor.smokers, type = "kaplan-meier")
km_nonsmokers <- survfit(Surv(AGE, Risk1Y) ~ PRE30, data = thor.nonsmokers, type = "kaplan-meier")
#plot
plot(fit.dat.wei.smokers, col = "blue", type = "l")
lines(fit.dat.wei.nonsmokers, col='red')
lines(km_smokers, col = "green")
lines(km_nonsmokers, col = "black")
legend("bottomleft", inset=.0001,
legend =  c("Weibull smokers", "Weibull nonsmokers", "km smokers", "km nonsmokers"),
col =  c("blue", "red", "green", "black"),
lwd=c(1,1), lty=c(1,1),
box.lty=0)
title(main="nonparametric & parametric estimators \n of the survivor function by group")
#"Checking Weibull if weibull is appropriate \n for smokers' group"
df1 <- data.frame(A=log(km_smokers$time) ,B=log(-log(km_smokers$surv)))
ggplot(df1) +
geom_point(aes(x=A, y=B)) +
geom_abline(aes(intercept = alpha_smokers*log(lam_hat_wei_smokers), slope = alpha_smokers, color = 'D1'))+
scale_colour_manual(name = " ", values = c("purple")) +
xlab("AA") +
ylab("BB") +
theme(legend.position = c(0.2, 0.95),legend.justification = c("right", "top"), legend.key = element_rect(fill = "white", colour = "gray19"))
#Checking Weibull if weibull is appropriate \n for nonsmokers' group
df2 <- data.frame(A=log(km_nonsmokers$time) ,B=log(-log(km_nonsmokers$surv)))
ggplot(df2) +
geom_point(aes(x=A, y=B)) +
geom_abline(aes(intercept = alpha_nonsmokers*log(lam_hat_wei_nonsmokers), slope = alpha_nonsmokers, color = 'D2'))+
scale_colour_manual(name = " ", values = c("purple")) +
xlab("AAAA") +
ylab("BBBB") +
theme(legend.position = c(0.2, 0.95),legend.justification = c("right", "top"), legend.key = element_rect(fill = "white", colour = "gray19"))
