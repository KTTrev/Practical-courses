##Question (a)
#Switch the default random number generator in R to Wichmann-Hill
RNGkind(kind = "Wichmann-Hill", normal.kind = NULL)
#Inversion method to simulate a binomial random variable
N = 1000
n = 10
p = 0.4
u <- runif(N)
bins <- .bincode(u, breaks = c(0, pbinom(0:10, 10, 0.4)), right = F, include.lowest = T)
bin_inv <- numeric()
for(i in 1:N){
bin_inv[i] <- bins[i]-1
}
#Simulation of a binomial random variable by simulating corresponding Bernoulli random variables by inversion method
bin_bern <- numeric()
for (i in 1:N){
v <- runif(n)
bin_bern[i] <- sum(v < p)
}
#Simulation of a binomial random variable with rbinom
bin_rbin <- rbinom(N, n, p)
#Plot the empirical pdf of all three samples on one panel
bin_inv <- data.frame(bin_inv)
str(bin_inv)
head(bin_inv)
rep(bin_inv, 1000)
bin_inv$method <- rep("bin_inv", 1000)
head(bin_inv)
colnames(bin_inv) <- c("rand_num", "method")
head(bin_inv)
bin_bern <- data.frame(bin_bern)
bin_bern$method <- rep("bin_bern", 1000)
colnames(bin_bern) <- c("rand_num", "method")
head(bin_bern)
bin_rbin <- data.frame(bin_rbin)
bin_rbin$method <- rep("bin_rbin", 1000)
colnames(bin_rbin) <- c("rand_num", "method")
head(bin_bern)
head(bin_rbin)
df <- rbind(bin_inv, bin_bern, bin_rbin)
head(df)
ggplot(df) +
geom_density(aes(x = rand_num, fill=method))
ggplot(df) +
geom_density(aes(x = rand_num, alpha=method))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.25)
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7)
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
scale_colour_manual(labels = c("urban", "rural", "hi"))# values = c("pink2", "green3", "blue"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
set.seed(250)
library("tidyverse")
##Question (a)
#Switch the default random number generator in R to Wichmann-Hill
RNGkind(kind = "Wichmann-Hill", normal.kind = NULL)
#Inversion method to simulate a binomial random variable
N = 1000
n = 10
p = 0.4
u <- runif(N)
bins <- .bincode(u, breaks = c(0, pbinom(0:10, 10, 0.4)), right = F, include.lowest = T)
bin_inv <- numeric()
for(i in 1:N){
bin_inv[i] <- bins[i]-1
}
#Simulation of a binomial random variable by simulating corresponding Bernoulli random variables by inversion method
bin_bern <- numeric()
for (i in 1:N){
v <- runif(n)
bin_bern[i] <- sum(v < p)
}
#Simulation of a binomial random variable with rbinom
bin_rbin <- rbinom(N, n, p)
#Plot the empirical pdf of all three samples on one panel
bin_inv <- data.frame(bin_inv)
bin_inv$method <- rep("bin_inv", 1000)
colnames(bin_inv) <- c("rand_num", "method")
bin_bern <- data.frame(bin_bern)
bin_bern$method <- rep("bin_bern", 1000)
colnames(bin_bern) <- c("rand_num", "method")
bin_rbin <- data.frame(bin_rbin)
bin_rbin$method <- rep("bin_rbin", 1000)
colnames(bin_rbin) <- c("rand_num", "method")
df <- rbind(bin_inv, bin_bern, bin_rbin)
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method")) +
theme_bw()
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method")) +
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Cylinders") +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation method") +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method") +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
#Plot the empirical pdf of all three samples on one panel
bin_inv <- data.frame(bin_inv)
bin_inv$method <- rep("inverse CDF", 1000)
colnames(bin_inv) <- c("rand_num", "method")
bin_bern <- data.frame(bin_bern)
bin_bern$method <- rep("From Bernoulli", 1000)
colnames(bin_bern) <- c("rbinom", "method")
bin_rbin <- data.frame(bin_rbin)
bin_rbin$method <- rep("bin_rbin", 1000)
colnames(bin_rbin) <- c("rand_num", "method")
df <- rbind(bin_inv, bin_bern, bin_rbin)
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method") +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
head(df)
#Plot the empirical pdf of all three samples on one panel
bin_inv <- data.frame(bin_inv)
bin_inv$method <- rep("inverse CDF", 1000)
colnames(bin_inv) <- c("rand_num", "method")
head(bin_inv )
head(bin_bern)
head(bin_rbin)
set.seed(250)
library("tidyverse")
##Question (a)
#Switch the default random number generator in R to Wichmann-Hill
RNGkind(kind = "Wichmann-Hill", normal.kind = NULL)
#Inversion method to simulate a binomial random variable
N = 1000
n = 10
p = 0.4
u <- runif(N)
bins <- .bincode(u, breaks = c(0, pbinom(0:10, 10, 0.4)), right = F, include.lowest = T)
bin_inv <- numeric()
for(i in 1:N){
bin_inv[i] <- bins[i]-1
}
#Simulation of a binomial random variable by simulating corresponding Bernoulli random variables by inversion method
bin_bern <- numeric()
for (i in 1:N){
v <- runif(n)
bin_bern[i] <- sum(v < p)
}
#Simulation of a binomial random variable with rbinom
bin_rbin <- rbinom(N, n, p)
#Plot the empirical pdf of all three samples on one panel
bin_inv <- data.frame(bin_inv)
bin_inv$method <- rep("inverse CDF", 1000)
colnames(bin_inv) <- c("rand_num", "method")
bin_bern <- data.frame(bin_bern)
bin_bern$method <- rep("From Bernoulli", 1000)
colnames(bin_bern) <- c("rand_num", "method")
bin_rbin <- data.frame(bin_rbin)
bin_rbin$method <- rep("rbinom", 1000)
colnames(bin_rbin) <- c("rand_num", "method")
df <- rbind(bin_inv, bin_bern, bin_rbin)
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method") +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method", title = "gggggggggggggggg") +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method", title = "empirical probability density functions of all
three samples") +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method", title = "empirical probability density functions of all three samples") +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method", title = "empirical probability density functions of all three samples", y = "random numbers") +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method", title = "empirical probability density functions of all three samples", ylab = "random numbers") +
scale_colour_manual(labels = c("urban", "rural", "hi"), values = c("pink2", "green3", "blue")) +
guides(colour = guide_legend(title="Simulation method"))
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method", title = "empirical probability density functions of all three samples", ylab = "random numbers") +
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method", title = "empirical probability density functions of all three samples", y = "random numbers")
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method", title = "empirical probability density functions of all three samples", y = "random numbers")
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method", title = "empirical probability density functions of all three samples", x = "random numbers")
ggplot(df) +
geom_density(aes(x = rand_num, color = method), alpha = 0.7) +
labs(color = "Simulation \n method", title = "empirical probability density functions of all three samples", x = "random numbers")
ggplot(df) +
geom_density(aes(x = rand_num, color = method), alpha = 1) +
labs(color = "Simulation \n method", title = "empirical probability density functions of all three samples", x = "random numbers")
ggplot(df) +
geom_density(aes(x = rand_num, color = method)) +
labs(color = "Simulation \n method", title = "empirical probability density functions of all three samples", x = "random numbers")
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.7) +
labs(fill = "Simulation \n method", title = "empirical probability density functions of all three samples", x = "random numbers")
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.5) +
labs(fill = "Simulation \n method", title = "empirical probability density functions of all three samples", x = "random numbers")
?RNGkind
#Switch the random number generator back to its default
RNGkind(kind = "default", normal.kind = NULL)
#Inversion method to simulate a binomial random variable
N = 1000
n = 10
p = 0.4
u <- runif(N)
bins <- .bincode(u, breaks = c(0, pbinom(0:10, 10, 0.4)), right = F, include.lowest = T)
bin_inv <- numeric()
for(i in 1:N){
bin_inv[i] <- bins[i]-1
}
#Simulation of a binomial random variable by simulating corresponding Bernoulli random variables by inversion method
bin_bern <- numeric()
for (i in 1:N){
v <- runif(n)
bin_bern[i] <- sum(v < p)
}
#Simulation of a binomial random variable with rbinom
bin_rbin <- rbinom(N, n, p)
#Plot the empirical pdf of all three samples on one panel
bin_inv <- data.frame(bin_inv)
bin_inv$method <- rep("inverse CDF", 1000)
colnames(bin_inv) <- c("rand_num", "method")
bin_bern <- data.frame(bin_bern)
bin_bern$method <- rep("From Bernoulli", 1000)
colnames(bin_bern) <- c("rand_num", "method")
bin_rbin <- data.frame(bin_rbin)
bin_rbin$method <- rep("rbinom", 1000)
colnames(bin_rbin) <- c("rand_num", "method")
df <- rbind(bin_inv, bin_bern, bin_rbin)
ggplot(df) +
geom_density(aes(x = rand_num, fill = method), alpha = 0.5) +
labs(fill = "Simulation \n method", title = "empirical probability density functions of all three samples", x = "random numbers")
install.packages("survival")
library("survival", lib.loc="/usr/lib/R/library")
detach("package:survival", unload=TRUE)
library("proxy", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
detach("package:proxy", unload=TRUE)
library("survival", lib.loc="/usr/lib/R/library")
detach("package:survival", unload=TRUE)
library("survival", lib.loc="/usr/lib/R/library")
detach("package:survival", unload=TRUE)
library("survival", lib.loc="/usr/lib/R/library")
detach("package:survival", unload=TRUE)
library("survival", lib.loc="/usr/lib/R/library")
detach("package:survival", unload=TRUE)
library("survival", lib.loc="/usr/lib/R/library")
detach("package:survival", unload=TRUE)
library("survival", lib.loc="/usr/lib/R/library")
library("survival", lib.loc="/usr/lib/R/library")
detach("package:survival", unload=TRUE)
library("survival", lib.loc="/usr/lib/R/library")
detach("package:survival", unload=TRUE)
remove.packages("survival", lib="/usr/lib/R/library")
remove.packages("survival", lib="/usr/lib/R/library")
.libPaths(proxy)
.libPaths("proxy")
.libPaths("ggplot2")
?.libPaths()
library("tidyverse")
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
library("survival", lib.loc="/usr/lib/R/library")
library("dplyr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
library("tidyverse", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
detach("package:tidyverse", unload=TRUE)
library("tidyverse", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
remove.packages("tidyverse", lib="~/R/x86_64-pc-linux-gnu-library/3.5")
remove.packages("survival", lib="/usr/lib/R/library")
remove.packages("survival", lib="/usr/lib/R/library")
remove.packages("survival", lib="/usr/lib/R/library")
remove.packages("survival", lib="/usr/lib/R/library")
install.packages("survival")
remove.packages("lattice", lib="/usr/lib/R/library")
remove.packages("lattice", lib="/usr/lib/R/library")
remove.packages("lattice", lib="/usr/lib/R/library")
install.packages("lattice")
library("lattice", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
remove.packages("lattice", lib="/usr/lib/R/library")
install.packages("survival")
library("survival", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
remove.packages("survival", lib="/usr/lib/R/library")
detach("package:survival", unload=TRUE)
library("tidyverse")
library("survival")
install.packages("tydiverse")
install.packages("tidyverse")
library("nlme", lib.loc="/usr/lib/R/library")
remove.packages("nlme", lib="/usr/lib/R/library")
remove.packages("nlme", lib="/usr/lib/R/library")
setwd("~/Practical-courses/Stochastic_Lab_Course_2")
library("tidyverse")
library("haven")
library(maptools)
library(raster)
library(rgdal)
##Question(a)
children <- read_dta("childrenfinal.dta")
#remove all variables that start with “s“, “v” and “m”, followed by a number
children1<- children %>%
dplyr::select(-matches("^[svm][0-9]"))
#convert labelled double into double variables
children2<- children1 %>%
mutate_if(is.double, as.double)
##Question(b)
#(b) Make a smaller tibble that contains variables hypage, ruralfacto, female, zstunt, zweight, zwast, adm2.
children3<- children2 %>%
dplyr::select(c(hypage, ruralfacto, female, zstunt, zweight, zwast, adm2))
#Make a scatter plot of zstunt against hypage, Add a smooth line to the plot
ggplot(children3, aes(x = zstunt, y = hypage)) +
geom_point() +
geom_smooth(se = F, color = "purple") +
theme_grey(base_size = 30)
#smooth plots of zstunt against age for females and males on one plot
ggplot(children3, aes(x = zstunt, y = hypage,  colour = factor(female))) +
geom_point() +
geom_smooth(se = F) +
scale_colour_manual(labels = c("male", "female"), values = c("blue2", "green3")) +
guides(colour = guide_legend(title="Gender")) +
theme_grey(base_size = 30)
#plot zstunt against age for urban and rural children
ggplot(children3, aes(x = zstunt, y = hypage,  colour = factor(ruralfacto))) +
geom_point() +
geom_smooth(se = F) +
scale_colour_manual(labels = c("urban", "rural"), values = c("blue2", "green3")) +
guides(colour = guide_legend(title="Area")) +
theme_grey(base_size = 30)
#Experiment with different aesthetics, themes and font sizes for the plots, report your favourite
##Question(c)
#help link https://rpubs.com/spoonerf/countrymapggplot2
Kenya1<-getData("GADM", country="KE", level=1) #Download Kenya shapefile data
#WARNING for linux users: Do not capitalize epsg in the following code to avoid errors.
Kenya1_UTM<-spTransform(Kenya1, CRS("+init=epsg:32537")) # setting an appropriate projection
colnames(children3)[7] <- "NAME_1" #rename adm2 into NAME_1
#sort in alphabetic order with respect to NAME_1
children3<- children3[order(children3$NAME_1),]
Kenya1_UTM@data<- Kenya1_UTM@data[order(Kenya1_UTM@data$NAME_1),]
#summarising children3 data by the mean of zstunt in the corresponding county
children4 <- children3 %>%
group_by(NAME_1) %>%
summarise(mean = mean(zstunt), n = n())
#Adding the missing county Isiolo
children4[nrow(children4) + 1,] <- NA
children4$NAME_1[47] <- "Isiolo"
#Prepare the dataframe for ggplot
Kenya1_UTM@data$id <- rownames(Kenya1_UTM@data)
Kenya1_UTM@data <- mutate(Kenya1_UTM@data, zstunt.mean= children4$mean)
Kenya1_df <- fortify(Kenya1_UTM)
Kenya1_df <- full_join(Kenya1_df,Kenya1_UTM@data, by="id")
#In order to add names to map, we need another dataframe with all the conunties' centroids
# "coordinates" extracts centroids of the polygons, in the order listed at Kenya1_UTM@data
centroids_df <- as.data.frame(coordinates(Kenya1_UTM))
names(centroids_df) <- c("long", "lat")
children4<- children4[order(children4$NAME_1),]
centroids_df$NAME_1 <- Kenya1_UTM@data$NAME_1
centroids_df$zstunt.mean <- children4$mean
#Generating the map
ggplot(data = Kenya1_df, aes(x = long, y = lat, group = group, fill = zstunt.mean)) +
geom_polygon(color = "black", size = 0.25) +
geom_text(data = centroids_df, aes(x = long, y = lat, label = NAME_1, group = NULL), size = 3) +
scale_fill_distiller(name="Zstunt mean for \n each county", palette = "Spectral") +
theme(aspect.ratio = 1)
##(d)write the tibble from (b) into a text file
write.table(children3,"children3.txt")
#plot zstunt against age for urban and rural children
ggplot(children3, aes(x = zstunt, y = hypage,  colour = factor(ruralfacto))) +
geom_point(alpha = 0.5) +
geom_smooth(se = F) +
scale_colour_manual(labels = c("urban", "rural"), values = c("blue2", "green3")) +
guides(colour = guide_legend(title="Area")) +
theme_grey(base_size = 30)
#plot zstunt against age for urban and rural children
ggplot(children3, aes(x = zstunt, y = hypage,  colour = factor(ruralfacto))) +
geom_point(alpha = 0.4) +
geom_smooth(se = F) +
scale_colour_manual(labels = c("urban", "rural"), values = c("blue2", "green3")) +
guides(colour = guide_legend(title="Area")) +
theme_grey(base_size = 30)
library(tikzDevice) # To export plots as .tex files
#plot zstunt against age for urban and rural children
ggplot(children3, aes(x = zstunt, y = hypage,  colour = factor(ruralfacto))) +
geom_point() +
geom_smooth(se = F) +
scale_colour_manual(labels = c("urban", "rural"), values = c("blue2", "green3")) +
guides(colour = guide_legend(title="Area"))
ggplot(children3, aes(x = zstunt, y = hypage)) +
geom_point() +
geom_smooth(se = F, color = "purple")
#smooth plots of zstunt against age for females and males on one plot
ggplot(children3, aes(x = zstunt, y = hypage,  colour = factor(female))) +
geom_point() +
geom_smooth(se = F) +
scale_colour_manual(labels = c("male", "female"), values = c("blue2", "green3")) +
guides(colour = guide_legend(title="Gender")) +
theme_grey(base_size = 30)
plot1 <- ggplot(children3, aes(x = zstunt, y = hypage)) +
geom_point(alpha = 0.4) +
geom_smooth(se = F, color = "purple")
plot1
#smooth plots of zstunt against age for females and males on one plot
plot2 <- ggplot(children3, aes(x = zstunt, y = hypage,  colour = factor(female))) +
geom_point(alpha = 0.4) +
geom_smooth(se = F) +
scale_colour_manual(labels = c("male", "female"), values = c("blue2", "green3")) +
guides(colour = guide_legend(title="Gender")) +
theme_grey(base_size = 30)
plot2
#smooth plots of zstunt against age for females and males on one plot
plot2 <- ggplot(children3, aes(x = zstunt, y = hypage,  colour = factor(female))) +
geom_point(alpha = 0.4) +
geom_smooth(se = F) +
scale_colour_manual(labels = c("male", "female"), values = c("blue2", "green3")) +
guides(colour = guide_legend(title="Gender"))
plot2
#plot zstunt against age for urban and rural children
ggplot(children3, aes(x = zstunt, y = hypage,  colour = factor(ruralfacto))) +
geom_point(alpha = 0.4) +
geom_smooth(se = F) +
scale_colour_manual(labels = c("urban", "rural"), values = c("blue2", "green3"))
dev.off()
tikz('Ex1plot1.tex',width=3.5, height=3)
plot1
dev.off()
tikz('Ex1plot2.tex',width=3.5, height=3)
plot2
dev.off()
tikz('Ex1plot3.tex',width=3.5, height=3)
plot3
dev.off()
plot3
#plot zstunt against age for urban and rural children
plot3 <- ggplot(children3, aes(x = zstunt, y = hypage,  colour = factor(ruralfacto))) +
geom_point(alpha = 0.4) +
geom_smooth(se = F) +
scale_colour_manual(labels = c("urban", "rural"), values = c("blue2", "green3"))
tikz('Ex1plot3.tex',width=3.5, height=3)
plot3
dev.off()
#plot zstunt against age for urban and rural children
plot3 <- ggplot(children3, aes(x = zstunt, y = hypage,  colour = factor(ruralfacto))) +
geom_point(alpha = 0.4) +
geom_smooth(se = F) +
scale_colour_manual(labels = c("urban", "rural"), values = c("blue2", "green3")) +
guides(colour = guide_legend(title="Area"))
tikz('Ex1plot3.tex',width=3.5, height=3)
plot3
dev.off()
?geom_smooth
#smooth plots of zstunt against age for females and males on one plot
plot2 <- ggplot(children3, aes(x = zstunt, y = hypage,  colour = factor(female))) +
geom_point(alpha = 0.4) +
geom_smooth(se = F, method = lm) +
scale_colour_manual(labels = c("male", "female"), values = c("blue2", "green3")) +
guides(colour = guide_legend(title="Gender"))
plot2
#smooth plots of zstunt against age for females and males on one plot
plot2 <- ggplot(children3, aes(x = zstunt, y = hypage,  colour = factor(female))) +
geom_point(alpha = 0.4) +
geom_smooth(se = F) +
scale_colour_manual(labels = c("male", "female"), values = c("blue2", "green3")) +
guides(colour = guide_legend(title="Gender"))
plot2
